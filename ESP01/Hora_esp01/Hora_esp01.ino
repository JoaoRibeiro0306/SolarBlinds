#include "Time.h"

#include <WiFiUdp.h>
#include <NTPClient.h>
#include <stdlib.h>

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/6ee0397b-9060-47b3-9abc-20946741b467 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float latitude;
  float longitude;
  int inclination;
  CloudPower in_power;
  bool automatic_mode;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

WiFiUDP ntpUDP;
 
// 'time.nist.gov' is used (default server) with +1 hour offset (3600 seconds) 60 seconds (60000 milliseconds) update interval
NTPClient timeClient(ntpUDP, "time.nist.gov", 3600, 60000);

//const char *ssid     = "*******";
//const char *password = "*******";

//const char *ssid     = "*******";
//const char *password = "*******";

char Time[] = "TIME:00:00:00";
char Date[] = "DATE:00/00/2000";
byte second_, minute_, hour_, day_, month_;
int year_;
int a=0;
String mode_send;
String inclination_send;

char ptr1[100];
char ptr2[100];

// ESP8266 ESP-01 Internet real time clock
 
// Include Arduino time library


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  WiFi.begin(ssid, password);
 
  Serial.print("Connecting.");
  while ( WiFi.status() != WL_CONNECTED ) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("connected");
 
  timeClient.begin();
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  if (a == 0) {
    write_time();
    a = 1;
  }
  
 
  delay(1000);
}

void write_time(){
  timeClient.update();
  unsigned long unix_epoch = timeClient.getEpochTime();    // Get Unix epoch time from the NTP server

  second_ = second(unix_epoch);
  minute_ = minute(unix_epoch);
  hour_   = hour(unix_epoch) - 1;
  day_    = day(unix_epoch);
  month_  = month(unix_epoch);
  year_   = year(unix_epoch);

  Time[12] = second_ % 10 + 48;
  Time[11] = second_ / 10 + 48;
  Time[9]  = minute_ % 10 + 48;
  Time[8]  = minute_ / 10 + 48;
  Time[6]  = hour_   % 10 + 48;
  Time[5]  = hour_   / 10 + 48;

  Date[5]  = day_   / 10 + 48;
  Date[6]  = day_   % 10 + 48;
  Date[8]  = month_  / 10 + 48;
  Date[9]  = month_  % 10 + 48;
  Date[13] = (year_   / 10) % 10 + 48;
  Date[14] = year_   % 10 % 10 + 48;

  // Send time and date to serial monitor
  //Serial.println(Time);
  //Serial.println(Date);

  Serial.write(Time);
  Serial.write(Date);

  inclination = 30;
}

/*
  Since AutomaticMode is READ_WRITE variable, onAutomaticModeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAutomaticModeChange()  {
  // Add your code here to act upon AutomaticMode change
  mode_send = String(automatic_mode);
  mode_send.toCharArray(ptr1, sizeof(mode_send));
  Serial.write(ptr1);
  Serial.println(mode_send);
  inclination_send = String(inclination);
  inclination_send.toCharArray(ptr2, sizeof(inclination_send));
  Serial.write(ptr2);
  Serial.println(inclination_send);
}

/*
  Since Inclination is READ_WRITE variable, onInclinationChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onInclinationChange()  {
  // Add your code here to act upon Inclination change
  mode_send = String(automatic_mode);
  mode_send.toCharArray(ptr1, sizeof(mode_send));
  Serial.write(ptr1);
  Serial.println(mode_send);
  inclination_send = String(inclination);
  inclination_send.toCharArray(ptr2, sizeof(inclination_send));
  Serial.write(ptr2);
  Serial.println(inclination_send);
}

/*
  Since InVoltage is READ_WRITE variable, onInVoltageChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onInVoltageChange()  {
  // Add your code here to act upon InVoltage change
  a = 1;
}

/*
  Since InCurrent is READ_WRITE variable, onInCurrentChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onInCurrentChange()  {
  // Add your code here to act upon InCurrent change
  a = 1;
}

/*
  Since InPower is READ_WRITE variable, onInPowerChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onInPowerChange()  {
  // Add your code here to act upon InPower change
  a = 1;
}



/*
  Since Location is READ_WRITE variable, onLocationChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLocationChange()  {
  // Add your code here to act upon Location change
  a = 1;
}








/*
  Since Latitude is READ_WRITE variable, onLatitudeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLatitudeChange()  {
  // Add your code here to act upon Latitude change
}


/*
  Since Longitude is READ_WRITE variable, onLongitudeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLongitudeChange()  {
  // Add your code here to act upon Longitude change
}